if(isBuildModule){
    apply plugin: 'com.android.application'
}else {
    apply plugin: 'com.android.library'
}

apply plugin:  'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary  'org.apache.http.legacy'

    compileOptions{
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                includeCompileClasspath true
            }
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean","LOG_DEBUG","false"
            buildConfigField "boolean","USE_CANARY" ,"false"
            buildConfigField "boolean","IS_BUILD_MODULE" ,"$isBuildModule"
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug{
            buildConfigField "boolean","LOG_DEBUG","true"
            buildConfigField "boolean","USE_CANARY" ,"true"
            buildConfigField "boolean","IS_BUILD_MODULE" ,"$isBuildModule"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    resourcePrefix "gold_"

    lintOptions{
        disable "InvaildPackage"
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main{
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()){
                manifest.srcFile "src/main/release/AndroidManifest.xml"
            } else{
                manifest.srcFile "src/main/debug/AndroidManifest.xml"
            }
        }

    }
}

buildscript{
    repositories {
        jcenter()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(":CommonRes")
    api project(":CommonService")


    if (isBuildModule.toBoolean()) {
        //view
        annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
            exclude module: 'support-annotations'
        }
        //tools
        annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
        annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
        //test
        debugImplementation rootProject.ext.dependencies["canary-debug"]
        releaseImplementation rootProject.ext.dependencies["canary-release"]
        testImplementation rootProject.ext.dependencies["canary-release"]
    } else {
        compileOnly rootProject.ext.dependencies["butterknife-compiler"]
        compileOnly rootProject.ext.dependencies["dagger2-compiler"]
        compileOnly rootProject.ext.dependencies["arouter-compiler"]
        compileOnly rootProject.ext.dependencies["canary-debug"]
        compileOnly rootProject.ext.dependencies["canary-release"]
    }

}